package { import flash.display.*; public class Base_Model extends movieclip { public var eyes_mc:movieclip; public var model_skin:movieclip; } }//package ﻿package customizeAvatar_fla { import flash.display.*; import flash.events.*; import fl.motion.*; import flash.geom.*; import flash.utils.*; import flash.text.*; import flash.net.*; import flash.ui.*; import flash.system.*; import adobe.utils.*; import flash.accessibility.*; import flash.desktop.*; import flash.errors.*; import flash.external.*; import flash.filters.*; import flash.globalization.*; import flash.media.*; import flash.net.drm.*; import flash.printing.*; import flash.profiler.*; import flash.sampler.*; import flash.sensors.*; import flash.text.ime.*; import flash.text.engine.*; import flash.xml.*; public dynamic class MainTimeline extends movieclip { public var save_btn:SimpleButton; public var display:movieclip; public var menu:CustumizationMenu; public var rotateBtn:SimpleButton; public var hair_tint:string; public var hair_Color:color; public var user_stats:user_attr; public var c_hair:string; public var c_skin_color; public var c_eye_color; public var hair_styles; public var model:Base_Model; public var hair:movieclip; public var default_model_color:color; public var scriptRequest:URLRequest; public var scriptLoader:URLLoader; public var scriptData:URLVariables; public var rData; public function MainTimeline(){ addFrameScript(0, this.frame1, 1, this.frame2); } public function createAvatar(_arg1:MouseEvent):void{ nextframe(); } public function setHairData(){ if (this.hair == this.hair_styles.long){ this.hair.x = 73.94; this.hair.y = 44.55; } else { if (this.hair == this.hair_styles.short){ this.hair.x = 73.5; this.hair.y = 30; } else { if (this.hair == this.hair_styles.afro){ this.hair.x = 74; this.hair.y = 28.75; }; }; }; this.hair.gotoandstop(1); } public function getModelPicture(_arg1:DisplayObject):Bitmap{ var _local2:BitmapData = new BitmapData(_arg1.width, _arg1.height, false); var _local3:Bitmap = new Bitmap(_local2); _local2.draw(_arg1); return (_local3); } public function gotoNext(){ var _local1:color = new color(); _local1.setTint(int(this.c_skin_color), 0.01); this.model.nextframe(); this.hair.nextframe(); } public function gotoPrev(){ var _local1:color = new color(); _local1.setTint(int(this.c_skin_color), 0.01); this.model.prevframe(); this.hair.prevframe(); } public function switchSide(_arg1:MouseEvent):void{ if (this.model.currentFrame == 1){ this.gotoNext(); } else { this.gotoPrev(); }; } public function handlePHP(_arg1:MouseEvent):void{ this.scriptLoader.addEventListener(Event.COMPLETE, this.successMsg); this.scriptLoader.addEventListener(IOErrorEvent.IO_ERROR, this.errorMsg); this.scriptData.selected_style = this.c_hair; this.scriptData.selected_skin_color = this.c_skin_color; this.getModelPicture(this.model); this.scriptData.selected_eye_color = this.c_eye_color; this.scriptRequest.data = this.scriptData; this.scriptLoader.load(this.scriptRequest); } public function successMsg(_arg1:Event):void{ } public function errorMsg(_arg1:IOErrorEvent):void{ } function frame1(){ stop(); this.hair_tint = new string("#000000"); this.hair_Color = new color(); this.hair_Color.setTint(int(this.hair_tint), 0.9); this.display.hairpiece_mc.transform.colorTransform = this.hair_Color; this.display.addEventListener(MouseEvent.CLICK, this.createAvatar); } function frame2(){ stop(); this.user_stats = new user_attr(); this.c_hair = this.user_stats.hair; this.c_skin_color = this.user_stats.skin_color; this.c_eye_color = this.user_stats.eye_color; this.hair_styles = { long:new Long_Strands(), short:new Short_Strands(), afro:new Afro_Strands() }; this.model = new Base_Model(); this.hair = new movieclip(); this.hair = this.hair_styles.short; this.setHairData(); this.hair.stop(); this.model.addChild(this.hair); this.model.stop(); this.model.x = 370; this.model.y = 50; this.model.width = 175; this.model.height = 650; this.model.stop(); addChild(this.model); this.default_model_color = new color(); this.default_model_color.setTint(int("0xffffd7"), 0.01); this.model.transform.colorTransform = this.default_model_color; this.rotateBtn.addEventListener(MouseEvent.CLICK, this.switchSide); this.save_btn.addEventListener(MouseEvent.CLICK, this.handlePHP); this.scriptRequest = new URLRequest("../transfer.php"); this.scriptLoader = new URLLoader(); this.scriptData = new URLVariables(); this.scriptLoader.dataFormat = URLLoaderDataFormat.VARIABLES; this.scriptRequest.method = URLRequestMethod.POST; } } }//package customizeAvatar_fla ﻿package { import flash.display.*; public dynamic class focusRectSkin extends movieclip { } }//package ﻿package { import flash.display.*; public dynamic class Short_Strands extends movieclip { } }//package ﻿package { import flash.display.*; public dynamic class SliderTrack_disabledSkin extends movieclip { } }//package ﻿package { import flash.display.*; public dynamic class Afro_Strands extends movieclip { } }//package ﻿package { import flash.display.*; public dynamic class SliderThumb_upSkin extends movieclip { } }//package ﻿package { import fl.controls.*; import flash.display.*; import flash.events.*; import fl.motion.*; import fl.events.*; public class CustumizationMenu extends movieclip { public var short_hair_btn:SimpleButton; public var eyeBtn:SimpleButton; public var afro_btn:SimpleButton; public var skinBtn:SimpleButton; public var long_hair_btn:SimpleButton; public var hairBtn:SimpleButton; public var eyeColorSlider:Slider; public var colorSlider:Slider; public var hair_box:movieclip; public var rHairCode:string; public var gHairCode:string; public var bHairCode:string; public var gHairNumber:number; public var bHairNumber:number; public var rHairNumber:number; public var myHairColor:color; public var hairColorCode; public var box:movieclip; public var rCode:string; public var gCode:string; public var bCode:string; public var gNumber:number; public var bNumber:number; public var rNumber:number; public var myColor:color; public var colorCode; public var eye_box:movieclip; public var redCode:string; public var greenCode:string; public var blueCode:string; public var greenNumber:number; public var blueNumber:number; public var redNumber:number; public var myEyeColor:color; public var eyeColorCode; public function CustumizationMenu(){ addFrameScript(0, this.frame1, 1, this.frame2, 2, this.frame3); } public function changeEye(_arg1:MouseEvent):void{ gotoandstop("Eye Menu"); } public function changeSkin(_arg1:MouseEvent):void{ gotoandstop("Skin Menu"); } public function switchLong(_arg1:MouseEvent=null):void{ movieclip(root).c_hair = "long"; movieclip(root).model.removeChild(movieclip(root).hair); movieclip(root).hair = movieclip(root).hair_styles.long; movieclip(root).setHairData(); movieclip(root).model.addChild(movieclip(root).hair); } public function switchShort(_arg1:MouseEvent=null):void{ movieclip(root).c_hair = "short"; movieclip(root).model.removeChild(movieclip(root).hair); movieclip(root).hair = movieclip(root).hair_styles.short; movieclip(root).setHairData(); movieclip(root).model.addChild(movieclip(root).hair); } public function switchAfro(_arg1:MouseEvent=null):void{ movieclip(root).c_hair = "afro"; movieclip(root).model.removeChild(movieclip(root).hair); movieclip(root).hair = movieclip(root).hair_styles.afro; movieclip(root).setHairData(); movieclip(root).model.addChild(movieclip(root).hair); } public function changeColor(_arg1:SliderEvent):void{ if (_arg1.currentTarget.value > 74){ this.gNumber = _arg1.currentTarget.value; } else { this.gNumber = 74; }; if (this.bNumber > 0){ this.bNumber = (this.gNumber - 40); } else { this.bNumber = 0; }; if (this.rNumber > 126){ if ((this.gNumber + 100) > 0xFF){ this.rNumber = 0xFF; } else { this.rNumber = (this.gNumber + 100); }; }; this.gCode = this.gNumber.tostring(16); this.bCode = this.bNumber.tostring(16); this.rCode = this.rNumber.tostring(16); this.colorCode = ((("0x" + this.rCode) + this.gCode) + this.bCode); this.myColor.setTint(int(this.colorCode), 0.10111111111); this.box.transform.colorTransform = this.myColor; movieclip(root).c_skin_color = this.colorCode; } public function changeHair(_arg1:MouseEvent):void{ gotoandstop("Hair Menu"); } public function changeEyeColor(_arg1:SliderEvent):void{ this.greenCode = this.greenNumber.tostring(16); this.blueCode = this.blueNumber.tostring(16); this.redCode = this.redNumber.tostring(16); this.eyeColorCode = ((("0x" + this.redCode) + this.greenCode) + this.blueCode); this.myEyeColor.setTint(int(this.eyeColorCode), 0.2); this.eye_box.transform.colorTransform = this.myEyeColor; movieclip(root).c_eye_color = this.eyeColorCode; } function frame1(){ this.hair_box = movieclip(root).hair; this.rHairCode = new string("0"); this.gHairCode = new string("0"); this.bHairCode = new string("0"); this.gHairNumber = int(this.greenCode); this.bHairNumber = int(this.blueCode); this.rHairNumber = int(this.redCode); this.myHairColor = new color(); this.hairColorCode = ((("0x" + this.rHairCode) + this.gHairCode) + this.bHairCode); this.myHairColor.setTint(int(this.hairColorCode), 0.8); this.hair_box.transform.colorTransform = this.myHairColor; stop(); this.eyeBtn.addEventListener(MouseEvent.CLICK, this.changeEye); this.skinBtn.addEventListener(MouseEvent.CLICK, this.changeSkin); this.long_hair_btn.addEventListener(MouseEvent.CLICK, this.switchLong); this.short_hair_btn.addEventListener(MouseEvent.CLICK, this.switchShort); this.afro_btn.addEventListener(MouseEvent.CLICK, this.switchAfro); } function frame2(){ this.colorSlider.maximum = 0xFF; this.colorSlider.value = this.colorSlider.maximum; this.box = movieclip(root).model.model_skin; this.rCode = new string("255"); this.gCode = new string("194"); this.bCode = new string("165"); this.gNumber = int(this.gCode); this.bNumber = int(this.bCode); this.rNumber = int(this.rCode); this.myColor = new color(); this.colorSlider.addEventListener(SliderEvent.CHANGE, this.changeColor); this.hairBtn.addEventListener(MouseEvent.CLICK, this.changeHair); this.eyeBtn.addEventListener(MouseEvent.CLICK, this.changeEye); } function frame3(){ this.eyeColorSlider.maximum = 0xFF; this.eyeColorSlider.value = this.eyeColorSlider.maximum; this.eye_box = movieclip(root).model.eyes_mc; this.redCode = new string("0"); this.greenCode = new string("0"); this.blueCode = new string("0"); this.greenNumber = int(this.greenCode); this.blueNumber = int(this.blueCode); this.redNumber = int(this.redCode); this.myEyeColor = new color(); this.eyeColorSlider.addEventListener(SliderEvent.CHANGE, this.changeEyeColor); this.hairBtn.addEventListener(MouseEvent.CLICK, this.changeHair); this.skinBtn.addEventListener(MouseEvent.CLICK, this.changeSkin); } } }//package ﻿package { import flash.display.*; public dynamic class SliderThumb_disabledSkin extends movieclip { } }//package ﻿package { public class user_attr { public var hair:string; public var skin_color:uint; public var eye_color:uint; public function user_attr(){ this.hair = new string(); this.skin_color = new uint(); this.eye_color = new uint(); super(); this.hair = "long"; this.skin_color = uint("0xffc39b"); } } }//package ﻿package { import flash.display.*; public dynamic class SliderTrack_skin extends movieclip { } }//package ﻿package { import flash.display.*; public dynamic class SliderTick_skin extends movieclip { } }//package ﻿package fl.controls { import flash.display.*; import fl.core.*; import flash.events.*; import fl.events.*; import flash.utils.*; public class BaseButton extends UIComponent { private static var defaultStyles:object = { upSkin:"Button_upSkin", downSkin:"Button_downSkin", overSkin:"Button_overSkin", disabledSkin:"Button_disabledSkin", selectedDisabledSkin:"Button_selectedDisabledSkin", selectedUpSkin:"Button_selectedUpSkin", selectedDownSkin:"Button_selectedDownSkin", selectedOverSkin:"Button_selectedOverSkin", focusRectSkin:null, focusRectPadding:null, repeatDelay:500, repeatInterval:35 }; protected var background:DisplayObject; protected var mouseState:string; protected var _selected:boolean = false; protected var _autoRepeat:boolean = false; protected var pressTimer:Timer; private var _mouseStateLocked:boolean = false; private var unlockedMouseState:string; public function BaseButton(){ buttonMode = true; mouseChildren = false; usehandcursor = false; setupMouseEvents(); setMouseState("up"); pressTimer = new Timer(1, 0); pressTimer.addEventListener(TimerEvent.TIMER, buttonDown, false, 0, true); } public static function getStyleDefinition():object{ return (defaultStyles); } override public function get enabled():boolean{ return (super.enabled); } override public function set enabled(_arg1:boolean):void{ super.enabled = _arg1; mouseEnabled = _arg1; } public function get selected():boolean{ return (_selected); } public function set selected(_arg1:boolean):void{ if (_selected == _arg1){ return; }; _selected = _arg1; invalidate(InvalidationType.STATE); } public function get autoRepeat():boolean{ return (_autoRepeat); } public function set autoRepeat(_arg1:boolean):void{ _autoRepeat = _arg1; } public function set mouseStateLocked(_arg1:boolean):void{ _mouseStateLocked = _arg1; if (_arg1 == false){ setMouseState(unlockedMouseState); } else { unlockedMouseState = mouseState; }; } public function setMouseState(_arg1:string):void{ if (_mouseStateLocked){ unlockedMouseState = _arg1; return; }; if (mouseState == _arg1){ return; }; mouseState = _arg1; invalidate(InvalidationType.STATE); } protected function setupMouseEvents():void{ addEventListener(MouseEvent.ROLL_OVER, mouseEventHandler, false, 0, true); addEventListener(MouseEvent.MOUSE_DOWN, mouseEventHandler, false, 0, true); addEventListener(MouseEvent.MOUSE_UP, mouseEventHandler, false, 0, true); addEventListener(MouseEvent.ROLL_OUT, mouseEventHandler, false, 0, true); } protected function mouseEventHandler(_arg1:MouseEvent):void{ if (_arg1.type == MouseEvent.MOUSE_DOWN){ setMouseState("down"); startPress(); } else { if ((((_arg1.type == MouseEvent.ROLL_OVER)) || ((_arg1.type == MouseEvent.MOUSE_UP)))){ setMouseState("over"); endPress(); } else { if (_arg1.type == MouseEvent.ROLL_OUT){ setMouseState("up"); endPress(); }; }; }; } protected function startPress():void{ if (_autoRepeat){ pressTimer.delay = number(getStyleValue("repeatDelay")); pressTimer.start(); }; dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true)); } protected function buttonDown(_arg1:TimerEvent):void{ if (!_autoRepeat){ endPress(); return; }; if (pressTimer.currentCount == 1){ pressTimer.delay = number(getStyleValue("repeatInterval")); }; dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true)); } protected function endPress():void{ pressTimer.reset(); } override protected function draw():void{ if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){ drawBackground(); invalidate(InvalidationType.size, false); }; if (isInvalid(InvalidationType.size)){ drawLayout(); }; super.draw(); } protected function drawBackground():void{ var _local1:string = ((enabled) ? mouseState : "disabled"); if (selected){ _local1 = (("selected" + _local1.substr(0, 1).touppercase()) + _local1.substr(1)); }; _local1 = (_local1 + "Skin"); var _local2:DisplayObject = background; background = getDisplayObjectInstance(getStyleValue(_local1)); addChildAt(background, 0); if (((!((_local2 == null))) && (!((_local2 == background))))){ removeChild(_local2); }; } protected function drawLayout():void{ background.width = width; background.height = height; } } }//package fl.controls ﻿package fl.controls { import flash.display.*; import fl.core.*; import flash.events.*; import fl.managers.*; import fl.events.*; import flash.ui.*; public class Slider extends UIComponent implements IFocusManagerComponent { protected static const TRACK_STYLES:object = { upSkin:"sliderTrackSkin", overSkin:"sliderTrackSkin", downSkin:"sliderTrackSkin", disabledSkin:"sliderTrackDisabledSkin" }; protected static const THUMB_STYLES:object = { upSkin:"thumbUpSkin", overSkin:"thumbOverSkin", downSkin:"thumbDownSkin", disabledSkin:"thumbDisabledSkin" }; protected static const TICK_STYLES:object = {upSkin:"tickSkin"}; protected static var defaultStyles:object = { thumbUpSkin:"SliderThumb_upSkin", thumbOverSkin:"SliderThumb_overSkin", thumbDownSkin:"SliderThumb_downSkin", thumbDisabledSkin:"SliderThumb_disabledSkin", sliderTrackSkin:"SliderTrack_skin", sliderTrackDisabledSkin:"SliderTrack_disabledSkin", tickSkin:"SliderTick_skin", focusRectSkin:null, focusRectPadding:null }; protected var _direction:string; protected var _minimum:number = 0; protected var _maximum:number = 10; protected var _value:number = 0; protected var _tickInterval:number = 0; protected var _snapInterval:number = 0; protected var _liveDragging:boolean = false; protected var tickContainer:Sprite; protected var thumb:BaseButton; protected var track:BaseButton; public function Slider(){ _direction = SliderDirection.HORIZONTAL; super(); setStyles(); } public static function getStyleDefinition():object{ return (defaultStyles); } public function get direction():string{ return (_direction); } public function set direction(_arg1:string):void{ _direction = _arg1; var _local2 = (_direction == SliderDirection.VERTICAL); if (isLivePreview){ if (_local2){ setScaleY(-1); y = track.height; } else { setScaleY(1); y = 0; }; positionThumb(); return; }; if (((_local2) && (componentInspectorSetting))){ if ((rotation % 90) == 0){ setScaleY(-1); }; }; if (!componentInspectorSetting){ rotation = ((_local2) ? 90 : 0); }; } public function get minimum():number{ return (_minimum); } public function set minimum(_arg1:number):void{ _minimum = _arg1; this.value = math.max(_arg1, this.value); invalidate(InvalidationType.data); } public function get maximum():number{ return (_maximum); } public function set maximum(_arg1:number):void{ _maximum = _arg1; this.value = math.min(_arg1, this.value); invalidate(InvalidationType.data); } public function get tickInterval():number{ return (_tickInterval); } public function set tickInterval(_arg1:number):void{ _tickInterval = _arg1; invalidate(InvalidationType.size); } public function get snapInterval():number{ return (_snapInterval); } public function set snapInterval(_arg1:number):void{ _snapInterval = _arg1; } public function set liveDragging(_arg1:boolean):void{ _liveDragging = _arg1; } public function get liveDragging():boolean{ return (_liveDragging); } override public function get enabled():boolean{ return (super.enabled); } override public function set enabled(_arg1:boolean):void{ if (enabled == _arg1){ return; }; super.enabled = _arg1; track.enabled = (thumb.enabled = _arg1); } override public function setSize(_arg1:number, _arg2:number):void{ if ((((_direction == SliderDirection.VERTICAL)) && (!(isLivePreview)))){ super.setSize(_arg2, _arg1); } else { super.setSize(_arg1, _arg2); }; invalidate(InvalidationType.size); } public function get value():number{ return (_value); } public function set value(_arg1:number):void{ doSetValue(_arg1); } protected function doSetValue(_arg1:number, _arg2:string=null, _arg3:string=null, _arg4:int=undefined):void{ var _local6:number; var _local7:number; var _local8:number; var _local9:number; var _local5:number = _value; if (((!((_snapInterval == 0))) && (!((_snapInterval == 1))))){ _local6 = math.pow(10, getPrecision(snapInterval)); _local7 = (_snapInterval * _local6); _local8 = math.round((_arg1 * _local6)); _local9 = (math.round((_local8 / _local7)) * _local7); _arg1 = (_local9 / _local6); _value = math.max(minimum, math.min(maximum, _arg1)); } else { _value = math.max(minimum, math.min(maximum, math.round(_arg1))); }; if (((!((_local5 == _value))) && (((((liveDragging) && (!((_arg3 == null))))) || ((_arg2 == InteractionInputType.KEYBOARD)))))){ dispatchEvent(new SliderEvent(SliderEvent.CHANGE, value, _arg3, _arg2, _arg4)); }; positionThumb(); } protected function setStyles():void{ copyStylesToChild(thumb, THUMB_STYLES); copyStylesToChild(track, TRACK_STYLES); } override protected function draw():void{ if (isInvalid(InvalidationType.STYLES)){ setStyles(); invalidate(InvalidationType.size, false); }; if (isInvalid(InvalidationType.size)){ track.setSize(_width, track.height); track.drawNow(); thumb.drawNow(); }; if (tickInterval > 0){ drawTicks(); } else { clearTicks(); }; positionThumb(); super.draw(); } protected function positionThumb():void{ thumb.x = ((((_direction)==SliderDirection.VERTICAL) ? (maximum - value) : (value - minimum) / (maximum - minimum)) * _width); } protected function drawTicks():void{ var _local5:DisplayObject; clearTicks(); tickContainer = new Sprite(); var _local1:number = ((maximum)<1) ? (tickInterval / 100) : tickInterval; var _local2:number = ((maximum - minimum) / _local1); var _local3:number = (_width / _local2); var _local4:uint; while (_local4 <= _local2) { _local5 = getDisplayObjectInstance(getStyleValue("tickSkin")); _local5.x = (_local3 * _local4); _local5.y = ((track.y - _local5.height) - 2); tickContainer.addChild(_local5); _local4++; }; addChild(tickContainer); } protected function clearTicks():void{ if (((!(tickContainer)) || (!(tickContainer.parent)))){ return; }; removeChild(tickContainer); } protected function calculateValue(_arg1:number, _arg2:string, _arg3:string, _arg4:int=undefined):void{ var _local5:number = ((_arg1 / _width) * (maximum - minimum)); if (_direction == SliderDirection.VERTICAL){ _local5 = (maximum - _local5); } else { _local5 = (minimum + _local5); }; doSetValue(_local5, _arg2, _arg3, _arg4); } protected function doDrag(_arg1:MouseEvent):void{ var _local2:number = (_width / snapInterval); var _local3:number = track.mouseX; calculateValue(_local3, InteractionInputType.mouse, SliderEventClickTarget.THUMB); dispatchEvent(new SliderEvent(SliderEvent.THUMB_DRAG, value, SliderEventClickTarget.THUMB, InteractionInputType.mouse)); } protected function thumbPressHandler(_arg1:MouseEvent):void{ var _local2:DisplayObjectContainer = focusManager.form; _local2.addEventListener(MouseEvent.MOUSE_MOVE, doDrag, false, 0, true); _local2.addEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler, false, 0, true); dispatchEvent(new SliderEvent(SliderEvent.THUMB_PRESS, value, SliderEventClickTarget.THUMB, InteractionInputType.mouse)); } protected function thumbReleaseHandler(_arg1:MouseEvent):void{ var _local2:DisplayObjectContainer = focusManager.form; _local2.removeEventListener(MouseEvent.MOUSE_MOVE, doDrag); _local2.removeEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler); dispatchEvent(new SliderEvent(SliderEvent.THUMB_RELEASE, value, SliderEventClickTarget.THUMB, InteractionInputType.mouse)); dispatchEvent(new SliderEvent(SliderEvent.CHANGE, value, SliderEventClickTarget.THUMB, InteractionInputType.mouse)); } protected function onTrackClick(_arg1:MouseEvent):void{ calculateValue(track.mouseX, InteractionInputType.mouse, SliderEventClickTarget.TRACK); if (!liveDragging){ dispatchEvent(new SliderEvent(SliderEvent.CHANGE, value, SliderEventClickTarget.TRACK, InteractionInputType.mouse)); }; } override protected function keyDownHandler(_arg1:KeyboardEvent):void{ var _local3:number; if (!enabled){ return; }; var _local2:number = ((snapInterval)>0) ? snapInterval : 1; var _local4 = (direction == SliderDirection.HORIZONTAL); if ((((((_arg1.keyCode == Keyboard.down)) && (!(_local4)))) || ((((_arg1.keyCode == Keyboard.left)) && (_local4))))){ _local3 = (value - _local2); } else { if ((((((_arg1.keyCode == Keyboard.up)) && (!(_local4)))) || ((((_arg1.keyCode == Keyboard.right)) && (_local4))))){ _local3 = (value + _local2); } else { if ((((((_arg1.keyCode == Keyboard.PAGE_DOWN)) && (!(_local4)))) || ((((_arg1.keyCode == Keyboard.home)) && (_local4))))){ _local3 = minimum; } else { if ((((((_arg1.keyCode == Keyboard.PAGE_UP)) && (!(_local4)))) || ((((_arg1.keyCode == Keyboard.end)) && (_local4))))){ _local3 = maximum; }; }; }; }; if (!isnan(_local3)){ _arg1.stopPropagation(); doSetValue(_local3, InteractionInputType.KEYBOARD, null, _arg1.keyCode); }; } override protected function configUI():void{ super.configUI(); thumb = new BaseButton(); thumb.setSize(13, 13); thumb.autoRepeat = false; addChild(thumb); thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbPressHandler, false, 0, true); track = new BaseButton(); track.move(0, 0); track.setSize(80, 4); track.autoRepeat = false; track.usehandcursor = false; track.addEventListener(MouseEvent.CLICK, onTrackClick, false, 0, true); addChildAt(track, 0); } protected function getPrecision(_arg1:number):number{ var _local2:string = _arg1.tostring(); if (_local2.indexof(".") == -1){ return (0); }; return (_local2.split(".").pop().length); } } }//package fl.controls ﻿package fl.controls { import flash.display.*; import fl.core.*; import flash.events.*; import fl.managers.*; import fl.events.*; import flash.text.*; import flash.ui.*; public class LabelButton extends BaseButton implements IFocusManagerComponent { private static var defaultStyles:object = { icon:null, upIcon:null, downIcon:null, overIcon:null, disabledIcon:null, selectedDisabledIcon:null, selectedUpIcon:null, selectedDownIcon:null, selectedOverIcon:null, textformat:null, disabledTextFormat:null, textPadding:5, embedfonts:false }; public static var createAccessibilityImplementation:function; public var textfield:textfield; protected var _labelPlacement:string = "right"; protected var _toggle:boolean = false; protected var icon:DisplayObject; protected var oldMouseState:string; protected var _label:string = "Label"; protected var mode:string = "center"; public static function getStyleDefinition():object{ return (mergeStyles(defaultStyles, BaseButton.getStyleDefinition())); } public function get label():string{ return (_label); } public function set label(_arg1:string):void{ _label = _arg1; if (textfield.text != _label){ textfield.text = _label; dispatchEvent(new ComponentEvent(ComponentEvent.LABEL_CHANGE)); }; invalidate(InvalidationType.size); invalidate(InvalidationType.STYLES); } public function get labelPlacement():string{ return (_labelPlacement); } public function set labelPlacement(_arg1:string):void{ _labelPlacement = _arg1; invalidate(InvalidationType.size); } public function get toggle():boolean{ return (_toggle); } public function set toggle(_arg1:boolean):void{ if (((!(_arg1)) && (super.selected))){ selected = false; }; _toggle = _arg1; if (_toggle){ addEventListener(MouseEvent.CLICK, toggleSelected, false, 0, true); } else { removeEventListener(MouseEvent.CLICK, toggleSelected); }; invalidate(InvalidationType.STATE); } protected function toggleSelected(_arg1:MouseEvent):void{ selected = !(selected); dispatchEvent(new Event(Event.CHANGE, true)); } override public function get selected():boolean{ return (((_toggle) ? _selected : false)); } override public function set selected(_arg1:boolean):void{ _selected = _arg1; if (_toggle){ invalidate(InvalidationType.STATE); }; } override protected function configUI():void{ super.configUI(); textfield = new textfield(); textfield.type = TextFieldType.dynamic; textfield.selectable = false; addChild(textfield); } override protected function draw():void{ if (textfield.text != _label){ label = _label; }; if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){ drawBackground(); drawIcon(); drawTextFormat(); invalidate(InvalidationType.size, false); }; if (isInvalid(InvalidationType.size)){ drawLayout(); }; if (isInvalid(InvalidationType.size, InvalidationType.STYLES)){ if (((isFocused) && (focusManager.showFocusIndicator))){ drawFocus(true); }; }; validate(); } protected function drawIcon():void{ var _local1:DisplayObject = icon; var _local2:string = ((enabled) ? mouseState : "disabled"); if (selected){ _local2 = (("selected" + _local2.substr(0, 1).touppercase()) + _local2.substr(1)); }; _local2 = (_local2 + "Icon"); var _local3:object = getStyleValue(_local2); if (_local3 == null){ _local3 = getStyleValue("icon"); }; if (_local3 != null){ icon = getDisplayObjectInstance(_local3); }; if (icon != null){ addChildAt(icon, 1); }; if (((!((_local1 == null))) && (!((_local1 == icon))))){ removeChild(_local1); }; } protected function drawTextFormat():void{ var _local1:object = UIComponent.getStyleDefinition(); var _local2:textformat = ((enabled) ? (_local1.defaultTextFormat as textformat) : (_local1.defaultDisabledTextFormat as textformat)); textfield.settextformat(_local2); var _local3:textformat = (getStyleValue(((enabled) ? "textFormat" : "disabledTextFormat")) as textformat); if (_local3 != null){ textfield.settextformat(_local3); } else { _local3 = _local2; }; textfield.defaultTextFormat = _local3; setEmbedFont(); } protected function setEmbedFont(){ var _local1:object = getStyleValue("embedFonts"); if (_local1 != null){ textfield.embedfonts = _local1; }; } override protected function drawLayout():void{ var _local7:number; var _local8:number; var _local1:number = number(getStyleValue("textPadding")); var _local2:string = (((((icon == null)) && ((mode == "center")))) ? ButtonLabelPlacement.TOP : _labelPlacement); textfield.height = (textfield.textheight + 4); var _local3:number = (textfield.textwidth + 4); var _local4:number = (textfield.textheight + 4); var _local5:number = ((icon)==null) ? 0 : (icon.width + _local1); var _local6:number = ((icon)==null) ? 0 : (icon.height + _local1); textfield.visible = (label.length > 0); if (icon != null){ icon.x = math.round(((width - icon.width) / 2)); icon.y = math.round(((height - icon.height) / 2)); }; if (textfield.visible == false){ textfield.width = 0; textfield.height = 0; } else { if ((((_local2 == ButtonLabelPlacement.BOTTOM)) || ((_local2 == ButtonLabelPlacement.TOP)))){ _local7 = math.max(0, math.min(_local3, (width - (2 * _local1)))); if ((height - 2) > _local4){ _local8 = _local4; } else { _local8 = (height - 2); }; _local3 = _local7; textfield.width = _local3; _local4 = _local8; textfield.height = _local4; textfield.x = math.round(((width - _local3) / 2)); textfield.y = math.round(((((height - textfield.height) - _local6) / 2) + ((_local2)==ButtonLabelPlacement.BOTTOM) ? _local6 : 0)); if (icon != null){ icon.y = math.round(((_local2)==ButtonLabelPlacement.BOTTOM) ? (textfield.y - _local6) : ((textfield.y + textfield.height) + _local1)); }; } else { _local7 = math.max(0, math.min(_local3, ((width - _local5) - (2 * _local1)))); _local3 = _local7; textfield.width = _local3; textfield.x = math.round(((((width - _local3) - _local5) / 2) + ((_local2)!=ButtonLabelPlacement.left) ? _local5 : 0)); textfield.y = math.round(((height - textfield.height) / 2)); if (icon != null){ icon.x = math.round(((_local2)!=ButtonLabelPlacement.left) ? (textfield.x - _local5) : ((textfield.x + _local3) + _local1)); }; }; }; super.drawLayout(); } override protected function keyDownHandler(_arg1:KeyboardEvent):void{ if (!enabled){ return; }; if (_arg1.keyCode == Keyboard.space){ if (oldMouseState == null){ oldMouseState = mouseState; }; setMouseState("down"); startPress(); }; } override protected function keyUpHandler(_arg1:KeyboardEvent):void{ if (!enabled){ return; }; if (_arg1.keyCode == Keyboard.space){ setMouseState(oldMouseState); oldMouseState = null; endPress(); dispatchEvent(new MouseEvent(MouseEvent.CLICK)); }; } override protected function initializeAccessibility():void{ if (LabelButton.createAccessibilityImplementation != null){ LabelButton.createAccessibilityImplementation(this); }; } } }//package fl.controls ﻿package fl.controls { import flash.display.*; import fl.core.*; import fl.managers.*; public class button extends LabelButton implements IFocusManagerComponent { private static var defaultStyles:object = { emphasizedSkin:"Button_emphasizedSkin", emphasizedPadding:2 }; public static var createAccessibilityImplementation:function; protected var _emphasized:boolean = false; protected var emphasizedBorder:DisplayObject; public static function getStyleDefinition():object{ return (UIComponent.mergeStyles(LabelButton.getStyleDefinition(), defaultStyles)); } public function get emphasized():boolean{ return (_emphasized); } public function set emphasized(_arg1:boolean):void{ _emphasized = _arg1; invalidate(InvalidationType.STYLES); } override protected function draw():void{ if (((isInvalid(InvalidationType.STYLES)) || (isInvalid(InvalidationType.size)))){ drawEmphasized(); }; super.draw(); if (emphasizedBorder != null){ setChildIndex(emphasizedBorder, (numChildren - 1)); }; } protected function drawEmphasized():void{ var _local2:number; if (emphasizedBorder != null){ removeChild(emphasizedBorder); }; emphasizedBorder = null; if (!_emphasized){ return; }; var _local1:object = getStyleValue("emphasizedSkin"); if (_local1 != null){ emphasizedBorder = getDisplayObjectInstance(_local1); }; if (emphasizedBorder != null){ addChildAt(emphasizedBorder, 0); _local2 = number(getStyleValue("emphasizedPadding")); emphasizedBorder.x = (emphasizedBorder.y = -(_local2)); emphasizedBorder.width = (width + (_local2 * 2)); emphasizedBorder.height = (height + (_local2 * 2)); }; } override public function drawFocus(_arg1:boolean):void{ var _local2:number; var _local3:*; super.drawFocus(_arg1); if (_arg1){ _local2 = number(getStyleValue("emphasizedPadding")); if ((((_local2 < 0)) || (!(_emphasized)))){ _local2 = 0; }; _local3 = getStyleValue("focusRectPadding"); _local3 = ((_local3)==null) ? 2 : _local3; _local3 = (_local3 + _local2); uiFocusRect.x = -(_local3); uiFocusRect.y = -(_local3); uiFocusRect.width = (width + (_local3 * 2)); uiFocusRect.height = (height + (_local3 * 2)); }; } override protected function initializeAccessibility():void{ if (button.createAccessibilityImplementation != null){ button.createAccessibilityImplementation(this); }; } } }//package fl.controls ﻿package fl.controls { public class ButtonLabelPlacement { public static const BOTTOM:string = "bottom"; public static const TOP:string = "top"; public static const left:string = "left"; public static const right:string = "right"; } }//package fl.controls ﻿package fl.controls { public class SliderDirection { public static var HORIZONTAL:string = "horizontal"; public static var VERTICAL:string = "vertical"; } }//package fl.controls ﻿package fl.motion { import flash.display.*; import flash.geom.*; public class color extends ColorTransform { private var _tintColor:number = 0; private var _tintMultiplier:number = 0; public function color(_arg1:number=1, _arg2:number=1, _arg3:number=1, _arg4:number=1, _arg5:number=0, _arg6:number=0, _arg7:number=0, _arg8:number=0){ super(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8); } public static function fromXML(_arg1:xml):color{ return (color(new (color)().parsexml(_arg1))); } public static function interpolateTransform(_arg1:ColorTransform, _arg2:ColorTransform, _arg3:number):ColorTransform{ var _local4:number = (1 - _arg3); var _local5:ColorTransform = new ColorTransform(((_arg1.redMultiplier * _local4) + (_arg2.redMultiplier * _arg3)), ((_arg1.greenMultiplier * _local4) + (_arg2.greenMultiplier * _arg3)), ((_arg1.blueMultiplier * _local4) + (_arg2.blueMultiplier * _arg3)), ((_arg1.alphaMultiplier * _local4) + (_arg2.alphaMultiplier * _arg3)), ((_arg1.redOffset * _local4) + (_arg2.redOffset * _arg3)), ((_arg1.greenOffset * _local4) + (_arg2.greenOffset * _arg3)), ((_arg1.blueOffset * _local4) + (_arg2.blueOffset * _arg3)), ((_arg1.alphaOffset * _local4) + (_arg2.alphaOffset * _arg3))); return (_local5); } public static function interpolateColor(_arg1:uint, _arg2:uint, _arg3:number):uint{ var _local4:number = (1 - _arg3); var _local5:uint = ((_arg1 >> 24) & 0xFF); var _local6:uint = ((_arg1 >> 16) & 0xFF); var _local7:uint = ((_arg1 >> 8) & 0xFF); var _local8:uint = (_arg1 & 0xFF); var _local9:uint = ((_arg2 >> 24) & 0xFF); var _local10:uint = ((_arg2 >> 16) & 0xFF); var _local11:uint = ((_arg2 >> 8) & 0xFF); var _local12:uint = (_arg2 & 0xFF); var _local13:uint = ((_local5 * _local4) + (_local9 * _arg3)); var _local14:uint = ((_local6 * _local4) + (_local10 * _arg3)); var _local15:uint = ((_local7 * _local4) + (_local11 * _arg3)); var _local16:uint = ((_local8 * _local4) + (_local12 * _arg3)); var _local17:uint = ((((_local13 << 24) | (_local14 << 16)) | (_local15 << 8)) | _local16); return (_local17); } public function get brightness():number{ return (((this.redOffset) ? (1 - this.redMultiplier) : (this.redMultiplier - 1))); } public function set brightness(_arg1:number):void{ if (_arg1 > 1){ _arg1 = 1; } else { if (_arg1 < -1){ _arg1 = -1; }; }; var _local2:number = (1 - math.abs(_arg1)); var _local3:number = 0; if (_arg1 > 0){ _local3 = (_arg1 * 0xFF); }; this.redMultiplier = (this.greenMultiplier = (this.blueMultiplier = _local2)); this.redOffset = (this.greenOffset = (this.blueOffset = _local3)); } public function setTint(_arg1:uint, _arg2:number):void{ this._tintColor = _arg1; this._tintMultiplier = _arg2; this.redMultiplier = (this.greenMultiplier = (this.blueMultiplier = (1 - _arg2))); var _local3:uint = ((_arg1 >> 16) & 0xFF); var _local4:uint = ((_arg1 >> 8) & 0xFF); var _local5:uint = (_arg1 & 0xFF); this.redOffset = math.round((_local3 * _arg2)); this.greenOffset = math.round((_local4 * _arg2)); this.blueOffset = math.round((_local5 * _arg2)); } public function get tintColor():uint{ return (this._tintColor); } public function set tintColor(_arg1:uint):void{ this.setTint(_arg1, this.tintMultiplier); } private function deriveTintColor():uint{ var _local1:number = (1 / this.tintMultiplier); var _local2:uint = math.round((this.redOffset * _local1)); var _local3:uint = math.round((this.greenOffset * _local1)); var _local4:uint = math.round((this.blueOffset * _local1)); var _local5:uint = (((_local2 << 16) | (_local3 << 8)) | _local4); return (_local5); } public function get tintMultiplier():number{ return (this._tintMultiplier); } public function set tintMultiplier(_arg1:number):void{ this.setTint(this.tintColor, _arg1); } private function parsexml(_arg1:xml=null):color{ var _local3:xml; var _local4:string; var _local5:uint; if (!_arg1){ return (this); }; var _local2:xml = _arg1.elements()[0]; if (!_local2){ return (this); }; for each (_local3 in _local2.attributes()) { _local4 = _local3.localName(); if (_local4 == "tintColor"){ _local5 = (number(_local3.tostring()) as uint); this.tintColor = _local5; } else { this[_local4] = number(_local3.tostring()); }; }; return (this); } } }//package fl.motion ﻿package fl.core { public class InvalidationType { public static const ALL:string = "all"; public static const size:string = "size"; public static const STYLES:string = "styles"; public static const RENDERER_STYLES:string = "rendererStyles"; public static const STATE:string = "state"; public static const data:string = "data"; public static const scroll:string = "scroll"; public static const SELECTED:string = "selected"; } }//package fl.core ﻿package fl.core { import flash.display.*; import flash.events.*; import fl.managers.*; import fl.events.*; import flash.utils.*; import flash.text.*; import flash.system.*; public class UIComponent extends Sprite { public static var inCallLaterPhase:boolean = false; private static var defaultStyles:object = { focusRectSkin:"focusRectSkin", focusRectPadding:2, textformat:new textformat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.left, 0, 0, 0, 0), disabledTextFormat:new textformat("_sans", 11, 0x999999, false, false, false, "", "", TextFormatAlign.left, 0, 0, 0, 0), defaultTextFormat:new textformat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.left, 0, 0, 0, 0), defaultDisabledTextFormat:new textformat("_sans", 11, 0x999999, false, false, false, "", "", TextFormatAlign.left, 0, 0, 0, 0) }; private static var focusManagers:Dictionary = new Dictionary(true); private static var focusManagerUsers:Dictionary = new Dictionary(true); public static var createAccessibilityImplementation:function; public const version:string = "3.0.3.1"; public var focusTarget:IFocusManagerComponent; protected var isLivePreview:boolean = false; private var tempText:textfield; protected var instanceStyles:object; protected var sharedStyles:object; protected var callLaterMethods:Dictionary; protected var invalidateFlag:boolean = false; protected var _enabled:boolean = true; protected var invalidHash:object; protected var uiFocusRect:DisplayObject; protected var isFocused:boolean = false; private var _focusEnabled:boolean = true; private var _mouseFocusEnabled:boolean = true; protected var _width:number; protected var _height:number; protected var _x:number; protected var _y:number; protected var startWidth:number; protected var startHeight:number; protected var _imeMode:string = null; protected var _oldIMEMode:string = null; protected var errorCaught:boolean = false; protected var _inspector:boolean = false; public function UIComponent(){ instanceStyles = {}; sharedStyles = {}; invalidHash = {}; callLaterMethods = new Dictionary(); StyleManager.registerInstance(this); configUI(); invalidate(InvalidationType.ALL); tabenabled = (this is IFocusManagerComponent); focusRect = false; if (tabenabled){ addEventListener(FocusEvent.FOCUS_IN, focusInHandler); addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler); addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler); addEventListener(KeyboardEvent.KEY_UP, keyUpHandler); }; initializeFocusManager(); addEventListener(Event.ENTER_FRAME, hookAccessibility, false, 0, true); } public static function getStyleDefinition():object{ return (defaultStyles); } public static function mergeStyles(... _args):object{ var _local5:object; var _local6:string; var _local2:object = {}; var _local3:uint = _args.length; var _local4:uint; while (_local4 < _local3) { _local5 = _args[_local4]; for (_local6 in _local5) { if (_local2[_local6] != null){ } else { _local2[_local6] = _args[_local4][_local6]; }; }; _local4++; }; return (_local2); } public function get componentInspectorSetting():boolean{ return (_inspector); } public function set componentInspectorSetting(_arg1:boolean):void{ _inspector = _arg1; if (_inspector){ beforeComponentParameters(); } else { afterComponentParameters(); }; } protected function beforeComponentParameters():void{ } protected function afterComponentParameters():void{ } public function get enabled():boolean{ return (_enabled); } public function set enabled(_arg1:boolean):void{ if (_arg1 == _enabled){ return; }; _enabled = _arg1; invalidate(InvalidationType.STATE); } public function setSize(_arg1:number, _arg2:number):void{ _width = _arg1; _height = _arg2; invalidate(InvalidationType.size); dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE, false)); } override public function get width():number{ return (_width); } override public function set width(_arg1:number):void{ if (_width == _arg1){ return; }; setSize(_arg1, height); } override public function get height():number{ return (_height); } override public function set height(_arg1:number):void{ if (_height == _arg1){ return; }; setSize(width, _arg1); } public function setstyle(_arg1:string, _arg2:object):void{ if ((((instanceStyles[_arg1] === _arg2)) && (!((_arg2 is textformat))))){ return; }; instanceStyles[_arg1] = _arg2; invalidate(InvalidationType.STYLES); } public function clearStyle(_arg1:string):void{ setstyle(_arg1, null); } public function getstyle(_arg1:string):object{ return (instanceStyles[_arg1]); } public function move(_arg1:number, _arg2:number):void{ _x = _arg1; _y = _arg2; super.x = math.round(_arg1); super.y = math.round(_arg2); dispatchEvent(new ComponentEvent(ComponentEvent.MOVE)); } override public function get x():number{ return (((isnan(_x)) ? super.x : _x)); } override public function set x(_arg1:number):void{ move(_arg1, _y); } override public function get y():number{ return (((isnan(_y)) ? super.y : _y)); } override public function set y(_arg1:number):void{ move(_x, _arg1); } override public function get scaleX():number{ return ((width / startWidth)); } override public function set scaleX(_arg1:number):void{ setSize((startWidth * _arg1), height); } override public function get scaleY():number{ return ((height / startHeight)); } override public function set scaleY(_arg1:number):void{ setSize(width, (startHeight * _arg1)); } protected function getScaleY():number{ return (super.scaleY); } protected function setScaleY(_arg1:number):void{ super.scaleY = _arg1; } protected function getScaleX():number{ return (super.scaleX); } protected function setScaleX(_arg1:number):void{ super.scaleX = _arg1; } override public function get visible():boolean{ return (super.visible); } override public function set visible(_arg1:boolean):void{ if (super.visible == _arg1){ return; }; super.visible = _arg1; var _local2:string = ((_arg1) ? ComponentEvent.show : ComponentEvent.hide); dispatchEvent(new ComponentEvent(_local2, true)); } public function validateNow():void{ invalidate(InvalidationType.ALL, false); draw(); } public function invalidate(_arg1:string="all", _arg2:boolean=true):void{ invalidHash[_arg1] = true; if (_arg2){ this.callLater(draw); }; } public function setSharedStyle(_arg1:string, _arg2:object):void{ if ((((sharedStyles[_arg1] === _arg2)) && (!((_arg2 is textformat))))){ return; }; sharedStyles[_arg1] = _arg2; if (instanceStyles[_arg1] == null){ invalidate(InvalidationType.STYLES); }; } public function get focusenabled():boolean{ return (_focusEnabled); } public function set focusenabled(_arg1:boolean):void{ _focusEnabled = _arg1; } public function get mouseFocusEnabled():boolean{ return (_mouseFocusEnabled); } public function set mouseFocusEnabled(_arg1:boolean):void{ _mouseFocusEnabled = _arg1; } public function get focusManager():IFocusManager{ var o:* = this; while (o) { if (UIComponent.focusManagers[o] != null){ return (IFocusManager(UIComponent.focusManagers[o])); }; try { o = o.parent; } catch(se:SecurityError) { return (null); }; }; return (null); } public function set focusManager(_arg1:IFocusManager):void{ UIComponent.focusManagers[this] = _arg1; } public function drawFocus(_arg1:boolean):void{ var _local2:number; isFocused = _arg1; if (((!((uiFocusRect == null))) && (contains(uiFocusRect)))){ removeChild(uiFocusRect); uiFocusRect = null; }; if (_arg1){ uiFocusRect = (getDisplayObjectInstance(getStyleValue("focusRectSkin")) as Sprite); if (uiFocusRect == null){ return; }; _local2 = number(getStyleValue("focusRectPadding")); uiFocusRect.x = -(_local2); uiFocusRect.y = -(_local2); uiFocusRect.width = (width + (_local2 * 2)); uiFocusRect.height = (height + (_local2 * 2)); addChildAt(uiFocusRect, 0); }; } public function setfocus():void{ if (stage){ stage.focus = this; }; } public function getfocus():InteractiveObject{ if (stage){ return (stage.focus); }; return (null); } protected function setIMEMode(_arg1:boolean){ var enabled:* = _arg1; if (_imeMode != null){ if (enabled){ IME.enabled = true; _oldIMEMode = IME.conversionMode; try { if (((!(errorCaught)) && (!((IME.conversionMode == IMEConversionMode.UNKNOWN))))){ IME.conversionMode = _imeMode; }; errorCaught = false; } catch(e:error) { errorCaught = true; throw (new error(("IME mode not supported: " + _imeMode))); }; } else { if (((!((IME.conversionMode == IMEConversionMode.UNKNOWN))) && (!((_oldIMEMode == IMEConversionMode.UNKNOWN))))){ IME.conversionMode = _oldIMEMode; }; IME.enabled = false; }; }; } public function drawNow():void{ draw(); } protected function configUI():void{ isLivePreview = checkLivePreview(); var _local1:number = rotation; rotation = 0; var _local2:number = super.width; var _local3:number = super.height; var _local4 = 1; super.scaleY = _local4; super.scaleX = _local4; setSize(_local2, _local3); move(super.x, super.y); rotation = _local1; startWidth = _local2; startHeight = _local3; if (numChildren > 0){ removeChildAt(0); }; } protected function checkLivePreview():boolean{ var className:* = null; if (parent == null){ return (false); }; try { className = getQualifiedClassName(parent); } catch(e:error) { }; return ((className == "fl.livepreview::LivePreviewParent")); } protected function isInvalid(_arg1:string, ... _args):boolean{ if (((invalidHash[_arg1]) || (invalidHash[InvalidationType.ALL]))){ return (true); }; while (_args.length > 0) { if (invalidHash[_args.pop()]){ return (true); }; }; return (false); } protected function validate():void{ invalidHash = {}; } protected function draw():void{ if (isInvalid(InvalidationType.size, InvalidationType.STYLES)){ if (((isFocused) && (focusManager.showFocusIndicator))){ drawFocus(true); }; }; validate(); } protected function getDisplayObjectInstance(_arg1:object):DisplayObject{ var skin:* = _arg1; var classDef:* = null; if ((skin is class)){ return ((new (skin)() as DisplayObject)); }; if ((skin is DisplayObject)){ (skin as DisplayObject).x = 0; (skin as DisplayObject).y = 0; return ((skin as DisplayObject)); }; try { classDef = getDefinitionByName(skin.tostring()); } catch(e:error) { try { classDef = (loaderInfo.applicationDomain.getDefinition(skin.tostring()) as object); } catch(e:error) { }; }; if (classDef == null){ return (null); }; return ((new (classDef)() as DisplayObject)); } protected function getStyleValue(_arg1:string):object{ return (((instanceStyles[_arg1])==null) ? sharedStyles[_arg1] : instanceStyles[_arg1]); } protected function copyStylesToChild(_arg1:UIComponent, _arg2:object):void{ var _local3:string; for (_local3 in _arg2) { _arg1.setstyle(_local3, getStyleValue(_arg2[_local3])); }; } protected function callLater(_arg1:function):void{ var fn:* = _arg1; if (inCallLaterPhase){ return; }; callLaterMethods[fn] = true; if (stage != null){ try { stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true); stage.invalidate(); } catch(se:SecurityError) { addEventListener(Event.ENTER_FRAME, callLaterDispatcher, false, 0, true); }; } else { addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true); }; } private function callLaterDispatcher(_arg1:Event):void{ var method:* = null; var event:* = _arg1; if (event.type == Event.ADDED_TO_STAGE){ try { removeEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher); stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true); stage.invalidate(); return; } catch(se1:SecurityError) { addEventListener(Event.ENTER_FRAME, callLaterDispatcher, false, 0, true); }; } else { event.target.removeEventListener(Event.RENDER, callLaterDispatcher); event.target.removeEventListener(Event.ENTER_FRAME, callLaterDispatcher); try { if (stage == null){ addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true); return; }; } catch(se2:SecurityError) { }; }; inCallLaterPhase = true; var methods:* = callLaterMethods; for (method in methods) { method(); delete methods[method]; }; inCallLaterPhase = false; } private function initializeFocusManager():void{ var _local1:IFocusManager; var _local2:Dictionary; if (stage == null){ addEventListener(Event.ADDED_TO_STAGE, addedHandler, false, 0, true); } else { createFocusManager(); _local1 = focusManager; if (_local1 != null){ _local2 = focusManagerUsers[_local1]; if (_local2 == null){ _local2 = new Dictionary(true); focusManagerUsers[_local1] = _local2; }; _local2[this] = true; }; }; addEventListener(Event.REMOVED_FROM_STAGE, removedHandler); } private function addedHandler(_arg1:Event):void{ removeEventListener(Event.ADDED_TO_STAGE, addedHandler); initializeFocusManager(); } private function removedHandler(_arg1:Event):void{ var _local3:Dictionary; var _local4:boolean; var _local5:*; var _local6:*; var _local7:IFocusManager; removeEventListener(Event.REMOVED_FROM_STAGE, removedHandler); addEventListener(Event.ADDED_TO_STAGE, addedHandler); var _local2:IFocusManager = focusManager; if (_local2 != null){ _local3 = focusManagerUsers[_local2]; if (_local3 != null){ delete _local3[this]; _local4 = true; for (_local5 in _local3) { _local4 = false; break; }; if (_local4){ delete focusManagerUsers[_local2]; _local3 = null; }; }; if (_local3 == null){ _local2.deactivate(); for (_local6 in focusManagers) { _local7 = focusManagers[_local6]; if (_local2 == _local7){ delete focusManagers[_local6]; }; }; }; }; } protected function createFocusManager():void{ var stageAccessOK:* = true; try { stage.getChildAt(0); } catch(se:SecurityError) { stageAccessOK = false; }; var myTopLevel:* = null; if (stageAccessOK){ myTopLevel = stage; } else { myTopLevel = this; try { while (myTopLevel.parent != null) { myTopLevel = myTopLevel.parent; }; } catch(se:SecurityError) { }; }; if (focusManagers[myTopLevel] == null){ focusManagers[myTopLevel] = new FocusManager(myTopLevel); }; } protected function isOurFocus(_arg1:DisplayObject):boolean{ return ((_arg1 == this)); } protected function focusInHandler(_arg1:FocusEvent):void{ var _local2:IFocusManager; if (isOurFocus((_arg1.target as DisplayObject))){ _local2 = focusManager; if (((_local2) && (_local2.showFocusIndicator))){ drawFocus(true); isFocused = true; }; }; } protected function focusOutHandler(_arg1:FocusEvent):void{ if (isOurFocus((_arg1.target as DisplayObject))){ drawFocus(false); isFocused = false; }; } protected function keyDownHandler(_arg1:KeyboardEvent):void{ } protected function keyUpHandler(_arg1:KeyboardEvent):void{ } protected function hookAccessibility(_arg1:Event):void{ removeEventListener(Event.ENTER_FRAME, hookAccessibility); initializeAccessibility(); } protected function initializeAccessibility():void{ if (UIComponent.createAccessibilityImplementation != null){ UIComponent.createAccessibilityImplementation(this); }; } } }//package fl.core ﻿package fl.core { import flash.display.*; public dynamic class ComponentShim extends movieclip { } }//package fl.core ﻿package fl.managers { import fl.controls.*; import flash.display.*; public interface IFocusManager { function get defaultButton():button; function set defaultButton(_arg1:button):void; function get defaultButtonEnabled():boolean; function set defaultButtonEnabled(_arg1:boolean):void; function get nextTabIndex():int; function get showFocusIndicator():boolean; function set showFocusIndicator(_arg1:boolean):void; function getfocus():InteractiveObject; function setfocus(_arg1:InteractiveObject):void; function showFocus():void; function hideFocus():void; function activate():void; function deactivate():void; function findFocusManagerComponent(_arg1:InteractiveObject):InteractiveObject; function getNextFocusManagerComponent(_arg1:boolean=false):InteractiveObject; function get form():DisplayObjectContainer; function set form(_arg1:DisplayObjectContainer):void; } }//package fl.managers ﻿package fl.managers { public interface IFocusManagerComponent { function get focusenabled():boolean; function set focusenabled(_arg1:boolean):void; function get mouseFocusEnabled():boolean; function get tabenabled():boolean; function get tabindex():int; function setfocus():void; function drawFocus(_arg1:boolean):void; } }//package fl.managers ﻿package fl.managers { import fl.core.*; import flash.utils.*; import flash.text.*; public class StyleManager { private static var _instance:StyleManager; private var styleToClassesHash:object; private var classToInstancesDict:Dictionary; private var classToStylesDict:Dictionary; private var classToDefaultStylesDict:Dictionary; private var globalStyles:object; public function StyleManager(){ styleToClassesHash = {}; classToInstancesDict = new Dictionary(true); classToStylesDict = new Dictionary(true); classToDefaultStylesDict = new Dictionary(true); globalStyles = UIComponent.getStyleDefinition(); } private static function getInstance(){ if (_instance == null){ _instance = new (StyleManager)(); }; return (_instance); } public static function registerInstance(_arg1:UIComponent):void{ var target:* = null; var defaultStyles:* = null; var styleToClasses:* = null; var n:* = null; var instance:* = _arg1; var inst:* = getInstance(); var classDef:* = getClassDef(instance); if (classDef == null){ return; }; if (inst.classToInstancesDict[classDef] == null){ inst.classToInstancesDict[classDef] = new Dictionary(true); target = classDef; while (defaultStyles == null) { if (target["getStyleDefinition"] != null){ defaultStyles = target["getStyleDefinition"](); break; }; try { target = (instance.loaderInfo.applicationDomain.getDefinition(getQualifiedSuperclassName(target)) as class); } catch(err:error) { try { target = (getDefinitionByName(getQualifiedSuperclassName(target)) as class); } catch(e:error) { defaultStyles = UIComponent.getStyleDefinition(); break; }; }; }; styleToClasses = inst.styleToClassesHash; for (n in defaultStyles) { if (styleToClasses[n] == null){ styleToClasses[n] = new Dictionary(true); }; styleToClasses[n][classDef] = true; }; inst.classToDefaultStylesDict[classDef] = defaultStyles; if (inst.classToStylesDict[classDef] == null){ inst.classToStylesDict[classDef] = {}; }; }; inst.classToInstancesDict[classDef][instance] = true; setSharedStyles(instance); } private static function setSharedStyles(_arg1:UIComponent):void{ var _local5:string; var _local2:StyleManager = getInstance(); var _local3:class = getClassDef(_arg1); var _local4:object = _local2.classToDefaultStylesDict[_local3]; for (_local5 in _local4) { _arg1.setSharedStyle(_local5, getSharedStyle(_arg1, _local5)); }; } private static function getSharedStyle(_arg1:UIComponent, _arg2:string):object{ var _local3:class = getClassDef(_arg1); var _local4:StyleManager = getInstance(); var _local5:object = _local4.classToStylesDict[_local3][_arg2]; if (_local5 != null){ return (_local5); }; _local5 = _local4.globalStyles[_arg2]; if (_local5 != null){ return (_local5); }; return (_local4.classToDefaultStylesDict[_local3][_arg2]); } public static function getComponentStyle(_arg1:object, _arg2:string):object{ var _local3:class = getClassDef(_arg1); var _local4:object = getInstance().classToStylesDict[_local3]; return (((_local4)==null) ? null : _local4[_arg2]); } public static function clearComponentStyle(_arg1:object, _arg2:string):void{ var _local3:class = getClassDef(_arg1); var _local4:object = getInstance().classToStylesDict[_local3]; if (((!((_local4 == null))) && (!((_local4[_arg2] == null))))){ delete _local4[_arg2]; invalidateComponentStyle(_local3, _arg2); }; } public static function setComponentStyle(_arg1:object, _arg2:string, _arg3:object):void{ var _local4:class = getClassDef(_arg1); var _local5:object = getInstance().classToStylesDict[_local4]; if (_local5 == null){ _local5 = (getInstance().classToStylesDict[_local4] = {}); }; if (_local5 == _arg3){ return; }; _local5[_arg2] = _arg3; invalidateComponentStyle(_local4, _arg2); } private static function getClassDef(_arg1:object):class{ var component:* = _arg1; if ((component is class)){ return ((component as class)); }; try { return ((getDefinitionByName(getQualifiedClassName(component)) as class)); } catch(e:error) { if ((component is UIComponent)){ try { return ((component.loaderInfo.applicationDomain.getDefinition(getQualifiedClassName(component)) as class)); } catch(e:error) { }; }; }; return (null); } private static function invalidateStyle(_arg1:string):void{ var _local3:object; var _local2:Dictionary = getInstance().styleToClassesHash[_arg1]; if (_local2 == null){ return; }; for (_local3 in _local2) { invalidateComponentStyle(class(_local3), _arg1); }; } private static function invalidateComponentStyle(_arg1:class, _arg2:string):void{ var _local4:object; var _local5:UIComponent; var _local3:Dictionary = getInstance().classToInstancesDict[_arg1]; if (_local3 == null){ return; }; for (_local4 in _local3) { _local5 = (_local4 as UIComponent); if (_local5 == null){ } else { _local5.setSharedStyle(_arg2, getSharedStyle(_local5, _arg2)); }; }; } public static function setstyle(_arg1:string, _arg2:object):void{ var _local3:object = getInstance().globalStyles; if ((((_local3[_arg1] === _arg2)) && (!((_arg2 is textformat))))){ return; }; _local3[_arg1] = _arg2; invalidateStyle(_arg1); } public static function clearStyle(_arg1:string):void{ setstyle(_arg1, null); } public static function getstyle(_arg1:string):object{ return (getInstance().globalStyles[_arg1]); } } }//package fl.managers ﻿package fl.managers { public interface IFocusManagerGroup { function get groupName():string; function set groupName(_arg1:string):void; function get selected():boolean; function set selected(_arg1:boolean):void; } }//package fl.managers ﻿package fl.managers { import fl.controls.*; import flash.display.*; import fl.core.*; import flash.events.*; import flash.utils.*; import flash.text.*; import flash.ui.*; public class FocusManager implements IFocusManager { private var _form:DisplayObjectContainer; private var focusableObjects:Dictionary; private var focusableCandidates:array; private var activated:boolean = false; private var calculateCandidates:boolean = true; private var lastFocus:InteractiveObject; private var _showFocusIndicator:boolean = true; private var lastAction:string; private var defButton:button; private var _defaultButton:button; private var _defaultButtonEnabled:boolean = true; public function FocusManager(_arg1:DisplayObjectContainer){ focusableObjects = new Dictionary(true); if (_arg1 != null){ _form = _arg1; activate(); }; } private function addedHandler(_arg1:Event):void{ var _local2:DisplayObject = DisplayObject(_arg1.target); if (_local2.stage){ addFocusables(DisplayObject(_arg1.target)); }; } private function removedHandler(_arg1:Event):void{ var _local2:int; var _local4:InteractiveObject; var _local3:DisplayObject = DisplayObject(_arg1.target); if ((((_local3 is IFocusManagerComponent)) && ((focusableObjects[_local3] == true)))){ if (_local3 == lastFocus){ IFocusManagerComponent(lastFocus).drawFocus(false); lastFocus = null; }; _local3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false); delete focusableObjects[_local3]; calculateCandidates = true; } else { if ((((_local3 is InteractiveObject)) && ((focusableObjects[_local3] == true)))){ _local4 = (_local3 as InteractiveObject); if (_local4){ if (_local4 == lastFocus){ lastFocus = null; }; delete focusableObjects[_local4]; calculateCandidates = true; }; _local3.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false, 0, true); }; }; removeFocusables(_local3); } private function addFocusables(_arg1:DisplayObject, _arg2:boolean=false):void{ var focusable:* = null; var io:* = null; var doc:* = null; var docParent:* = null; var i:* = 0; var child:* = null; var o:* = _arg1; var skipTopLevel:boolean = _arg2; if (!skipTopLevel){ if ((o is IFocusManagerComponent)){ focusable = IFocusManagerComponent(o); if (focusable.focusenabled){ if (((focusable.tabenabled) && (isTabVisible(o)))){ focusableObjects[o] = true; calculateCandidates = true; }; o.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false, 0, true); o.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler, false, 0, true); }; } else { if ((o is InteractiveObject)){ io = (o as InteractiveObject); if (((((io) && (io.tabenabled))) && ((findFocusManagerComponent(io) == io)))){ focusableObjects[io] = true; calculateCandidates = true; }; io.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false, 0, true); io.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler, false, 0, true); }; }; }; if ((o is DisplayObjectContainer)){ doc = DisplayObjectContainer(o); o.addEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler, false, 0, true); docParent = null; try { docParent = doc.parent; } catch(se:SecurityError) { docParent = null; }; if ((((((doc is stage)) || ((docParent is stage)))) || (doc.tabchildren))){ i = 0; while (i < doc.numChildren) { try { child = doc.getChildAt(i); if (child != null){ addFocusables(doc.getChildAt(i)); }; } catch(error:SecurityError) { }; i = (i + 1); }; }; }; } private function removeFocusables(_arg1:DisplayObject):void{ var _local2:object; var _local3:DisplayObject; if ((_arg1 is DisplayObjectContainer)){ _arg1.removeEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler, false); _arg1.removeEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler, false); for (_local2 in focusableObjects) { _local3 = DisplayObject(_local2); if (DisplayObjectContainer(_arg1).contains(_local3)){ if (_local3 == lastFocus){ lastFocus = null; }; _local3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false); delete focusableObjects[_local2]; calculateCandidates = true; }; }; }; } private function isTabVisible(_arg1:DisplayObject):boolean{ var p:* = null; var o:* = _arg1; try { p = o.parent; while (((((p) && (!((p is stage))))) && (!(((p.parent) && ((p.parent is stage))))))) { if (!p.tabchildren){ return (false); }; p = p.parent; }; } catch(se:SecurityError) { }; return (true); } private function isValidFocusCandidate(_arg1:DisplayObject, _arg2:string):boolean{ var _local3:IFocusManagerGroup; if (!isEnabledAndVisible(_arg1)){ return (false); }; if ((_arg1 is IFocusManagerGroup)){ _local3 = IFocusManagerGroup(_arg1); if (_arg2 == _local3.groupName){ return (false); }; }; return (true); } private function isEnabledAndVisible(_arg1:DisplayObject):boolean{ var formParent:* = null; var tf:* = null; var sb:* = null; var o:* = _arg1; try { formParent = DisplayObject(form).parent; while (o != formParent) { if ((o is UIComponent)){ if (!UIComponent(o).enabled){ return (false); }; } else { if ((o is textfield)){ tf = textfield(o); if ((((tf.type == TextFieldType.dynamic)) || (!(tf.selectable)))){ return (false); }; } else { if ((o is SimpleButton)){ sb = SimpleButton(o); if (!sb.enabled){ return (false); }; }; }; }; if (!o.visible){ return (false); }; o = o.parent; }; } catch(se:SecurityError) { }; return (true); } private function tabEnabledChangeHandler(_arg1:Event):void{ calculateCandidates = true; var _local2:InteractiveObject = InteractiveObject(_arg1.target); var _local3 = (focusableObjects[_local2] == true); if (_local2.tabenabled){ if (((!(_local3)) && (isTabVisible(_local2)))){ if (!(_local2 is IFocusManagerComponent)){ _local2.focusRect = false; }; focusableObjects[_local2] = true; }; } else { if (_local3){ delete focusableObjects[_local2]; }; }; } private function tabIndexChangeHandler(_arg1:Event):void{ calculateCandidates = true; } private function tabChildrenChangeHandler(_arg1:Event):void{ if (_arg1.target != _arg1.currentTarget){ return; }; calculateCandidates = true; var _local2:DisplayObjectContainer = DisplayObjectContainer(_arg1.target); if (_local2.tabchildren){ addFocusables(_local2, true); } else { removeFocusables(_local2); }; } public function activate():void{ if (activated){ return; }; addFocusables(form); form.addEventListener(Event.ADDED, addedHandler, false, 0, true); form.addEventListener(Event.REMOVED, removedHandler, false, 0, true); try { form.stage.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false, 0, true); form.stage.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false, 0, true); form.stage.addEventListener(Event.ACTIVATE, activateHandler, false, 0, true); form.stage.addEventListener(Event.DEACTIVATE, deactivateHandler, false, 0, true); } catch(se:SecurityError) { form.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false, 0, true); form.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false, 0, true); form.addEventListener(Event.ACTIVATE, activateHandler, false, 0, true); form.addEventListener(Event.DEACTIVATE, deactivateHandler, false, 0, true); }; form.addEventListener(FocusEvent.FOCUS_IN, focusInHandler, true, 0, true); form.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true, 0, true); form.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true); form.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true, 0, true); activated = true; if (lastFocus){ setfocus(lastFocus); }; } public function deactivate():void{ if (!activated){ return; }; focusableObjects = new Dictionary(true); focusableCandidates = null; lastFocus = null; defButton = null; form.removeEventListener(Event.ADDED, addedHandler, false); form.removeEventListener(Event.REMOVED, removedHandler, false); try { form.stage.removeEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false); form.stage.removeEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false); form.stage.removeEventListener(Event.ACTIVATE, activateHandler, false); form.stage.removeEventListener(Event.DEACTIVATE, deactivateHandler, false); } catch(se:SecurityError) { }; form.removeEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false); form.removeEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false); form.removeEventListener(Event.ACTIVATE, activateHandler, false); form.removeEventListener(Event.DEACTIVATE, deactivateHandler, false); form.removeEventListener(FocusEvent.FOCUS_IN, focusInHandler, true); form.removeEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true); form.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false); form.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true); activated = false; } private function focusInHandler(_arg1:FocusEvent):void{ var _local3:button; if (!activated){ return; }; var _local2:InteractiveObject = InteractiveObject(_arg1.target); if (form.contains(_local2)){ lastFocus = findFocusManagerComponent(InteractiveObject(_local2)); if ((lastFocus is button)){ _local3 = button(lastFocus); if (defButton){ defButton.emphasized = false; defButton = _local3; _local3.emphasized = true; }; } else { if (((defButton) && (!((defButton == _defaultButton))))){ defButton.emphasized = false; defButton = _defaultButton; _defaultButton.emphasized = true; }; }; }; } private function focusOutHandler(_arg1:FocusEvent):void{ if (!activated){ return; }; var _local2:InteractiveObject = (_arg1.target as InteractiveObject); } private function activateHandler(_arg1:Event):void{ if (!activated){ return; }; var _local2:InteractiveObject = InteractiveObject(_arg1.target); if (lastFocus){ if ((lastFocus is IFocusManagerComponent)){ IFocusManagerComponent(lastFocus).setfocus(); } else { form.stage.focus = lastFocus; }; }; lastAction = "ACTIVATE"; } private function deactivateHandler(_arg1:Event):void{ if (!activated){ return; }; var _local2:InteractiveObject = InteractiveObject(_arg1.target); } private function mouseFocusChangeHandler(_arg1:FocusEvent):void{ if (!activated){ return; }; if ((_arg1.relatedObject is textfield)){ return; }; _arg1.preventDefault(); } private function keyFocusChangeHandler(_arg1:FocusEvent):void{ if (!activated){ return; }; showFocusIndicator = true; if ((((((_arg1.keyCode == Keyboard.tab)) || ((_arg1.keyCode == 0)))) && (!(_arg1.isDefaultPrevented())))){ setFocusToNextObject(_arg1); _arg1.preventDefault(); }; } private function keyDownHandler(_arg1:KeyboardEvent):void{ if (!activated){ return; }; if (_arg1.keyCode == Keyboard.tab){ lastAction = "KEY"; if (calculateCandidates){ sortFocusableObjects(); calculateCandidates = false; }; }; if (((((((defaultButtonEnabled) && ((_arg1.keyCode == Keyboard.enter)))) && (defaultButton))) && (defButton.enabled))){ sendDefaultButtonEvent(); }; } private function mouseDownHandler(_arg1:MouseEvent):void{ if (!activated){ return; }; if (_arg1.isDefaultPrevented()){ return; }; var _local2:InteractiveObject = getTopLevelFocusTarget(InteractiveObject(_arg1.target)); if (!_local2){ return; }; showFocusIndicator = false; if (((((!((_local2 == lastFocus))) || ((lastAction == "ACTIVATE")))) && (!((_local2 is textfield))))){ setfocus(_local2); }; lastAction = "MOUSEDOWN"; } public function get defaultButton():button{ return (_defaultButton); } public function set defaultButton(_arg1:button):void{ var _local2:button = ((_arg1) ? button(_arg1) : null); if (_local2 != _defaultButton){ if (_defaultButton){ _defaultButton.emphasized = false; }; if (defButton){ defButton.emphasized = false; }; _defaultButton = _local2; defButton = _local2; if (_local2){ _local2.emphasized = true; }; }; } public function sendDefaultButtonEvent():void{ defButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK)); } private function setFocusToNextObject(_arg1:FocusEvent):void{ if (!hasFocusableObjects()){ return; }; var _local2:InteractiveObject = getNextFocusManagerComponent(_arg1.shiftKey); if (_local2){ setfocus(_local2); }; } private function hasFocusableObjects():boolean{ var _local1:object; for (_local1 in focusableObjects) { return (true); }; return (false); } public function getNextFocusManagerComponent(_arg1:boolean=false):InteractiveObject{ var _local8:IFocusManagerGroup; if (!hasFocusableObjects()){ return (null); }; if (calculateCandidates){ sortFocusableObjects(); calculateCandidates = false; }; var _local2:DisplayObject = form.stage.focus; _local2 = DisplayObject(findFocusManagerComponent(InteractiveObject(_local2))); var _local3 = ""; if ((_local2 is IFocusManagerGroup)){ _local8 = IFocusManagerGroup(_local2); _local3 = _local8.groupName; }; var _local4:int = getIndexOfFocusedObject(_local2); var _local5:boolean; var _local6:int = _local4; if (_local4 == -1){ if (_arg1){ _local4 = focusableCandidates.length; }; _local5 = true; }; var _local7:int = getIndexOfNextObject(_local4, _arg1, _local5, _local3); return (findFocusManagerComponent(focusableCandidates[_local7])); } private function getIndexOfFocusedObject(_arg1:DisplayObject):int{ var _local2:int = focusableCandidates.length; var _local3:int; _local3 = 0; while (_local3 < _local2) { if (focusableCandidates[_local3] == _arg1){ return (_local3); }; _local3++; }; return (-1); } private function getIndexOfNextObject(_arg1:int, _arg2:boolean, _arg3:boolean, _arg4:string):int{ var _local7:DisplayObject; var _local8:IFocusManagerGroup; var _local9:int; var _local10:DisplayObject; var _local11:IFocusManagerGroup; var _local5:int = focusableCandidates.length; var _local6:int = _arg1; while (true) { if (_arg2){ _arg1--; } else { _arg1++; }; if (_arg3){ if (((_arg2) && ((_arg1 < 0)))){ break; }; if (((!(_arg2)) && ((_arg1 == _local5)))){ break; }; } else { _arg1 = ((_arg1 + _local5) % _local5); if (_local6 == _arg1){ break; }; }; if (isValidFocusCandidate(focusableCandidates[_arg1], _arg4)){ _local7 = DisplayObject(findFocusManagerComponent(focusableCandidates[_arg1])); if ((_local7 is IFocusManagerGroup)){ _local8 = IFocusManagerGroup(_local7); _local9 = 0; while (_local9 < focusableCandidates.length) { _local10 = focusableCandidates[_local9]; if ((_local10 is IFocusManagerGroup)){ _local11 = IFocusManagerGroup(_local10); if ((((_local11.groupName == _local8.groupName)) && (_local11.selected))){ _arg1 = _local9; break; }; }; _local9++; }; }; return (_arg1); }; }; return (_arg1); } private function sortFocusableObjects():void{ var _local1:object; var _local2:InteractiveObject; focusableCandidates = []; for (_local1 in focusableObjects) { _local2 = InteractiveObject(_local1); if (((((_local2.tabindex) && (!(isnan(number(_local2.tabindex)))))) && ((_local2.tabindex > 0)))){ sortFocusableObjectsTabIndex(); return; }; focusableCandidates.push(_local2); }; focusableCandidates.sort(sortByDepth); } private function sortFocusableObjectsTabIndex():void{ var _local1:object; var _local2:InteractiveObject; focusableCandidates = []; for (_local1 in focusableObjects) { _local2 = InteractiveObject(_local1); if (((_local2.tabindex) && (!(isnan(number(_local2.tabindex)))))){ focusableCandidates.push(_local2); }; }; focusableCandidates.sort(sortByTabIndex); } private function sortByDepth(_arg1:InteractiveObject, _arg2:InteractiveObject):number{ var index:* = 0; var tmp:* = null; var tmp2:* = null; var aa:* = _arg1; var bb:* = _arg2; var val1:* = ""; var val2:* = ""; var zeros:* = "0000"; var a:* = DisplayObject(aa); var b:* = DisplayObject(bb); try { while (((!((a == DisplayObject(form)))) && (a.parent))) { index = getChildIndex(a.parent, a); tmp = index.tostring(16); if (tmp.length < 4){ tmp2 = (zeros.substring(0, (4 - tmp.length)) + tmp); }; val1 = (tmp2 + val1); a = a.parent; }; } catch(se1:SecurityError) { }; try { while (((!((b == DisplayObject(form)))) && (b.parent))) { index = getChildIndex(b.parent, b); tmp = index.tostring(16); if (tmp.length < 4){ tmp2 = (zeros.substring(0, (4 - tmp.length)) + tmp); }; val2 = (tmp2 + val2); b = b.parent; }; } catch(se2:SecurityError) { }; return ((((val1 > val2)) ? 1 : (((val1 < val2)) ? -1 : 0))); } private function getChildIndex(_arg1:DisplayObjectContainer, _arg2:DisplayObject):int{ return (_arg1.getChildIndex(_arg2)); } private function sortByTabIndex(_arg1:InteractiveObject, _arg2:InteractiveObject):int{ return ((((_arg1.tabindex > _arg2.tabindex)) ? 1 : (((_arg1.tabindex < _arg2.tabindex)) ? -1 : sortByDepth(_arg1, _arg2)))); } public function get defaultButtonEnabled():boolean{ return (_defaultButtonEnabled); } public function set defaultButtonEnabled(_arg1:boolean):void{ _defaultButtonEnabled = _arg1; } public function get nextTabIndex():int{ return (0); } public function get showFocusIndicator():boolean{ return (_showFocusIndicator); } public function set showFocusIndicator(_arg1:boolean):void{ _showFocusIndicator = _arg1; } public function get form():DisplayObjectContainer{ return (_form); } public function set form(_arg1:DisplayObjectContainer):void{ _form = _arg1; } public function getfocus():InteractiveObject{ var _local1:InteractiveObject = form.stage.focus; return (findFocusManagerComponent(_local1)); } public function setfocus(_arg1:InteractiveObject):void{ if ((_arg1 is IFocusManagerComponent)){ IFocusManagerComponent(_arg1).setfocus(); } else { form.stage.focus = _arg1; }; } public function showFocus():void{ } public function hideFocus():void{ } public function findFocusManagerComponent(_arg1:InteractiveObject):InteractiveObject{ var component:* = _arg1; var p:* = component; try { while (component) { if ((((component is IFocusManagerComponent)) && (IFocusManagerComponent(component).focusenabled))){ return (component); }; component = component.parent; }; } catch(se:SecurityError) { }; return (p); } private function getTopLevelFocusTarget(_arg1:InteractiveObject):InteractiveObject{ var o:* = _arg1; try { while (o != InteractiveObject(form)) { if ((((((((o is IFocusManagerComponent)) && (IFocusManagerComponent(o).focusenabled))) && (IFocusManagerComponent(o).mouseFocusEnabled))) && (UIComponent(o).enabled))){ return (o); }; o = o.parent; if (o == null){ break; }; }; } catch(se:SecurityError) { }; return (null); } } }//package fl.managers ﻿package fl.events { public class InteractionInputType { public static const mouse:string = "mouse"; public static const KEYBOARD:string = "keyboard"; } }//package fl.events ﻿package fl.events { import flash.events.*; public class ComponentEvent extends Event { public static const BUTTON_DOWN:string = "buttonDown"; public static const LABEL_CHANGE:string = "labelChange"; public static const hide:string = "hide"; public static const show:string = "show"; public static const RESIZE:string = "resize"; public static const MOVE:string = "move"; public static const enter:string = "enter"; public function ComponentEvent(_arg1:string, _arg2:boolean=false, _arg3:boolean=false){ super(_arg1, _arg2, _arg3); } override public function tostring():string{ return (formatToString("ComponentEvent", "type", "bubbles", "cancelable")); } override public function clone():Event{ return (new ComponentEvent(type, bubbles, cancelable)); } } }//package fl.events ﻿package fl.events { public class SliderEventClickTarget { public static const THUMB:string = "thumb"; public static const TRACK:string = "track"; } }//package fl.events ﻿package fl.events { import flash.events.*; public class SliderEvent extends Event { public static const CHANGE:string = "change"; public static const THUMB_DRAG:string = "thumbDrag"; public static const THUMB_PRESS:string = "thumbPress"; public static const THUMB_RELEASE:string = "thumbRelease"; protected var _triggerEvent:string; protected var _value:number; protected var _keyCode:number; protected var _clickTarget:string; public function SliderEvent(_arg1:string, _arg2:number, _arg3:string, _arg4:string, _arg5:int=0){ _value = _arg2; _keyCode = _arg5; _triggerEvent = _arg4; _clickTarget = _arg3; super(_arg1); } public function get value():number{ return (_value); } public function get keyCode():number{ return (_keyCode); } public function get triggerEvent():string{ return (_triggerEvent); } public function get clickTarget():string{ return (_clickTarget); } override public function tostring():string{ return (formatToString("SliderEvent", "type", "value", "bubbles", "cancelable", "keyCode", "triggerEvent", "clickTarget")); } override public function clone():Event{ return (new SliderEvent(type, _value, _clickTarget, _triggerEvent, _keyCode)); } } }//package fl.events ﻿package { import flash.display.*; public dynamic class SliderThumb_overSkin extends movieclip { } }//package ﻿package { import flash.display.*; public dynamic class SliderThumb_downSkin extends movieclip { } }//package ﻿package { import flash.display.*; public dynamic class Long_Strands extends movieclip { } }//package

